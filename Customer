# Base Customer Class
class Customer:
    def __init__(self, customer_id: int, name: str, email: str, password: str):
        self._customer_id = customer_id
        self._name = name
        self._email = email
        self._password = password
        self._order_history = []  # List of Order objects

    @property
    def customer_id(self):
        return self._customer_id
    
    @customer_id.setter
    def customer_id(self, value: int):
        if not isinstance(value, int) or value <= 0:
            raise ValueError("Customer ID must be a positive integer.")
        self._customer_id = value

    @property
    def name(self):
        return self._name
    
    @name.setter
    def name(self, value: str):
        if not value.strip():
            raise ValueError("Name cannot be empty.")
        self._name = value

    @property
    def email(self):
        return self._email
    
    @email.setter
    def email(self, value: str):
        if '@' not in value or '.' not in value.split('@')[-1]:
            raise ValueError("Invalid email format.")
        self._email = value

    @property
    def password(self):
        return self._password
    
    @password.setter
    def password(self, value: str):
        if len(value) < 6:
            raise ValueError("Password must be at least 6 characters long.")
        self._password = value

    @property
    def order_history(self):
        return self._order_history
    
    @order_history.setter
    def order_history(self, value):
        if not isinstance(value, list):
            raise ValueError("Order history must be a list.")
        self._order_history = value

    def add_order(self, order):
        self.order_history.append(order)
